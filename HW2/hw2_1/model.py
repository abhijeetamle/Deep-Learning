# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

"""

# Commented out IPython magic to ensure Python compatibility.
%tensorflow_version 1.x
import tensorflow as tf
import numpy as np
import random

tf.__version__

class Seq2Seq_Model():
    def __init__(self, rnn_size, num_layers, dim_video_feat, embedding_size, 
                    learning_rate, word_to_idx, max_gradient_norm,
                    max_encoder_steps, max_decoder_steps):
        tf.set_random_seed(9487)
        np.random.seed(9487)
        random.seed(9487)

        self.rnn_size = rnn_size
        self.num_layers = num_layers
        self.dim_video_feat = dim_video_feat
        self.embedding_size = embedding_size
        self.learning_rate = learning_rate
        self.word_to_idx = word_to_idx
        self.max_gradient_norm = max_gradient_norm
        self.max_encoder_steps = max_encoder_steps
        self.max_decoder_steps = max_decoder_steps

        self.vocab_size = len(self.word_to_idx)

        self.build_model()

    def _create_rnn_cell(self):
        def single_rnn_cell():
            #creating single LSTM cell
            single_cell = tf.contrib.rnn.BasicLSTMCell(self.rnn_size, forget_bias=0.7, state_is_tuple=False)
            cell = tf.contrib.rnn.DropoutWrapper(single_cell, output_keep_prob=self.keep_prob_placeholder, seed=9487)
            return cell
        cell = tf.contrib.rnn.MultiRNNCell([single_rnn_cell() for _ in range(self.num_layers)])
        return cell

    def build_model(self):
        tf.set_random_seed(9487)
        np.random.seed(9487)
        random.seed(9487)

        print ('Building new model')
        # defining placeholders

        self.encoder_inputs = tf.placeholder(tf.float32, [None, None, None], name='encoder_inputs')
        self.encoder_inputs_length = tf.placeholder(tf.int32, [None], name='encoder_inputs_length')

        self.batch_size = tf.placeholder(tf.int32, [], name='batch_size')
        self.keep_prob_placeholder = tf.placeholder(tf.float32, name='keep_prob_placeholder')

        self.decoder_targets = tf.placeholder(tf.int32, [None, None], name='decoder_targets')
        self.decoder_targets_length = tf.placeholder(tf.int32, [None], name='decoder_targets_length')

        self.max_target_sequence_length = tf.reduce_max(self.decoder_targets_length, name='max_target_len')
        self.mask = tf.sequence_mask(self.decoder_targets_length, self.max_target_sequence_length, dtype=tf.float32, name='masks')

        # encoder model
        with tf.variable_scope('encoder', reuse=tf.AUTO_REUSE):
            # Encoder embedding.
            encoder_inputs_flatten = tf.reshape(self.encoder_inputs, [-1, self.dim_video_feat])
            encoder_inputs_embedded = tf.layers.dense(encoder_inputs_flatten, self.embedding_size, use_bias=True)
            encoder_inputs_embedded = tf.reshape(encoder_inputs_embedded, [self.batch_size, self.max_encoder_steps, self.rnn_size])

            # Building RNN cell
            encoder_cell = self._create_rnn_cell()

            # Running Dynamic RNN
            #   encoder_outputs: [batch_size, max_time, num_units]
            #   encoder_state: [batch_size, num_units]
            encoder_outputs, encoder_state = tf.nn.dynamic_rnn(
                encoder_cell, encoder_inputs_embedded, 
                sequence_length=self.encoder_inputs_length, 
                dtype=tf.float32)

        # decoder model 
        with tf.variable_scope('decoder', reuse=tf.AUTO_REUSE):
            encoder_inputs_length = self.encoder_inputs_length
            batch_size = self.batch_size
            
            # Decoder embedding
            embedding_decoder = tf.Variable(tf.random_uniform([self.vocab_size, self.rnn_size], -0.1, 0.1, seed=9487), name='embedding_decoder')

            # Building RNN cell
            decoder_cell = self._create_rnn_cell()

            # Adding Bahdanau Attention on encoder outputs
            attention_mechanism = tf.contrib.seq2seq.BahdanauAttention(
                num_units=self.rnn_size, 
                memory=encoder_outputs, 
                normalize=True,
                memory_sequence_length=encoder_inputs_length)

            # Adding Attention Wrapper on decoder cell
            decoder_cell = tf.contrib.seq2seq.AttentionWrapper(
                cell=decoder_cell, 
                attention_mechanism=attention_mechanism, 
                attention_layer_size=self.rnn_size, 
                name='Attention_Wrapper')

            
            decoder_initial_state = decoder_cell.zero_state(batch_size=batch_size, dtype=tf.float32).clone(cell_state=encoder_state)

            output_layer = tf.layers.Dense(self.vocab_size, kernel_initializer=tf.truncated_normal_initializer(mean=0.0, stddev=0.1, seed=9487))

            
            
            ending = tf.strided_slice(self.decoder_targets, [0, 0], [self.batch_size, -1], [1, 1])
            decoder_inputs = tf.concat([tf.fill([self.batch_size, 1], self.word_to_idx['<bos>']), ending], 1)
            
            # Look up embedding:
            #   decoder_inputs: [batch_size, max_time]
            #   decoder_inputs_embedded: [batch_size, max_time, embedding_size]
            decoder_inputs_embedded = tf.nn.embedding_lookup(embedding_decoder, decoder_inputs)

            # Helper
            training_helper = tf.contrib.seq2seq.TrainingHelper(
                inputs=decoder_inputs_embedded, 
                sequence_length=self.decoder_targets_length, 
                time_major=False, name='training_helper')
            
            # Decoder
            training_decoder = tf.contrib.seq2seq.BasicDecoder(
                cell=decoder_cell, helper=training_helper, 
                initial_state=decoder_initial_state, 
                output_layer=output_layer)
            
            # decoder_outputs: (rnn_outputs, sample_id)
            # rnn_output: [batch_size, decoder_targets_length, vocab_size]
            # sample_id: [batch_size], tf.int32
            decoder_outputs, _, _ = tf.contrib.seq2seq.dynamic_decode(
                decoder=training_decoder, 
                impute_finished=True, 
                maximum_iterations=self.max_target_sequence_length)

            
            self.decoder_logits_train = tf.identity(decoder_outputs.rnn_output)
            self.decoder_predict_train = tf.argmax(self.decoder_logits_train, axis=-1, name='decoder_pred_train')

            
            self.loss = tf.contrib.seq2seq.sequence_loss(
                logits=self.decoder_logits_train, 
                targets=self.decoder_targets, 
                weights=self.mask)

            # Training summary for the current batch_loss
            tf.summary.scalar('loss', self.loss)
            self.summary_op = tf.summary.merge_all()

            optimizer = tf.train.AdamOptimizer(self.learning_rate)
            trainable_params = tf.trainable_variables()
            gradients = tf.gradients(self.loss, trainable_params)
            clip_gradients, _ = tf.clip_by_global_norm(gradients, self.max_gradient_norm)
            self.train_op = optimizer.apply_gradients(zip(clip_gradients, trainable_params))

            
# For Model testing

            # Token of BOS and EOS.
            start_tokens = tf.ones([self.batch_size, ], tf.int32) * self.word_to_idx['<bos>']
            end_token = self.word_to_idx['<eos>']
            
            
            # Helper
            inference_decoding_helper = tf.contrib.seq2seq.GreedyEmbeddingHelper(
                embedding=embedding_decoder, 
                start_tokens=start_tokens, 
                end_token=end_token)
            # Decoder
            inference_decoder = tf.contrib.seq2seq.BasicDecoder(
                cell=decoder_cell, 
                helper=inference_decoding_helper, 
                initial_state=decoder_initial_state, 
                output_layer=output_layer)

            
            inference_decoder_outputs, _, _ = tf.contrib.seq2seq.dynamic_decode(
                decoder=inference_decoder, 
                maximum_iterations=self.max_decoder_steps)

            self.decoder_predict_decode = tf.expand_dims(inference_decoder_outputs.sample_id, -1)
            self.decoder_predict_logits = inference_decoder_outputs.rnn_output

        # Saving the model 
        self.saver = tf.train.Saver(tf.global_variables(), max_to_keep=5)

    def train(self, sess, encoder_inputs, encoder_inputs_length, decoder_targets, decoder_targets_length):
        
        feed_dict = {self.encoder_inputs: encoder_inputs,
                      self.encoder_inputs_length: encoder_inputs_length,
                      self.decoder_targets: decoder_targets,
                      self.decoder_targets_length: decoder_targets_length,
                      self.keep_prob_placeholder: 0.7,
                      self.batch_size: len(encoder_inputs)}
        _, loss, summary = sess.run([self.train_op, self.loss, self.summary_op], feed_dict=feed_dict)
        return loss, summary

    def test(self, sess, encoder_inputs, encoder_inputs_length):
        
        feed_dict = {self.encoder_inputs: encoder_inputs,
                      self.encoder_inputs_length: encoder_inputs_length,
                      self.keep_prob_placeholder: 1.0,
                      self.batch_size: len(encoder_inputs)}
        predict, logits = sess.run([self.decoder_predict_decode, self.decoder_predict_logits], feed_dict=feed_dict)
        return predict, logits