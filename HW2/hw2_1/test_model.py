# -*- coding: utf-8 -*-
"""test_model.ipynb

Automatically generated by Colaboratory.

"""


# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import tensorflow as tf
import pandas as pd
import numpy as np
import os
import sys
import json
import random
import pickle
import time

print(tf.__version__)

from model import Seq2Seq_Model


def infer():
    np.random.seed(9487)
    random.seed(9487)
    tf.set_random_seed(9487)

    #test_folder = '/content/drive/My Drive/Deep_Learning/MLDS_hw2_1_data/testing_data'
    #output_testset_filename = '/content/drive/My Drive/Deep_Learning/Training1/models4/output_testset.txt'
	
    test_folder_arg = str(sys.argv[1])
    output_testset_filename_arg = str(sys.argv[2])

    test_folder = test_folder_arg
    output_testset_filename = output_testset_filename_arg

    test_id_filename = test_folder + '/id.txt'
    test_video_feat_folder = test_folder + '/feat/'

    
    rnn_size=1024
    dim_video_feat=4096
    embedding_size=1024
    learning_rate=0.0001
    batch_size=1
    max_encoder_steps=64
    max_decoder_steps=15
    dim_video_frame=80

    #model_dir="/content/drive/My Drive/Deep_Learning/Training1/models4/"
    model_dir = "/"
    
#    word2index = pickle.load(open('/content/drive/My Drive/Deep_Learning/Training1/word2index.obj', 'rb'))
#    index2word = pickle.load(open('/content/drive/My Drive/Deep_Learning/Training1/index2word.obj', 'rb'))

    word2index = pickle.load(open('/word2index.obj', 'rb'))
    index2word = pickle.load(open('/index2word.obj', 'rb'))

    index2word_series = pd.Series(index2word)

    print('Reading completed for pickle files.')

    test_video_IDs = []
    with open(test_id_filename, 'r') as f:
        for line in f:
            line = line.rstrip()
            test_video_IDs.append(line)
    
	
    test_video_feat_filenames = os.listdir(test_video_feat_folder)
    test_video_feat_filepaths = [(test_video_feat_folder + filename) for filename in test_video_feat_filenames]

    test_video_feat_dict = {}
    for filepath in test_video_feat_filepaths:
        test_video_feat = np.load(filepath)
        
        sampled_video_frame = sorted(random.sample(range(dim_video_frame), max_encoder_steps))
        test_video_feat = test_video_feat[sampled_video_frame]

        test_video_ID = filepath[: -4].replace(test_video_feat_folder, "")
        test_video_feat_dict[test_video_ID] = test_video_feat
    
    print('Reading completed for testing files.')

    with tf.Session() as sess:
        model = Seq2Seq_Model(
            rnn_size=rnn_size, 
            num_layers=2, 
            dim_video_feat=dim_video_feat, 
            embedding_size=embedding_size, 
            learning_rate=learning_rate, 
            word_to_idx=word2index, 
            max_gradient_norm=5.0, 
            max_encoder_steps=max_encoder_steps, 
            max_decoder_steps=max_decoder_steps
        )
        ckpt = tf.train.get_checkpoint_state(model_dir)
        if ckpt and tf.train.checkpoint_exists(ckpt.model_checkpoint_path):
            print('Reloading model parameters.')
            model.saver.restore(sess, ckpt.model_checkpoint_path)
        else:
            raise ValueError('No such file:[{}]'.format(model_dir))

        test_captions = []
        for ID in test_video_IDs:
            test_video_feat = test_video_feat_dict[ID].reshape(1, max_encoder_steps, dim_video_feat)
            test_video_frame = [max_decoder_steps] * batch_size

            test_caption_words_index, logits = model.test(
                sess, 
                test_video_feat, 
                test_video_frame)

            test_caption_words_index = np.array(test_caption_words_index).reshape(-1)
            test_caption_words = index2word_series[test_caption_words_index]
            test_caption = ' '.join(test_caption_words) 

            test_caption = ' '.join(test_caption_words)
            test_caption = test_caption.replace('<bos> ', '')
            test_caption = test_caption.replace('<eos>', '')
            test_caption = test_caption.replace(' <eos>', '')
            test_caption = test_caption.replace('<pad> ', '')
            test_caption = test_caption.replace(' <pad>', '')
            test_caption = test_caption.replace(' <unk>', '')
            test_caption = test_caption.replace('<unk> ', '')

            if (test_caption == ""):
                test_caption = '.'

            
            test_captions.append(test_caption)
        
        df = pd.DataFrame(np.array([test_video_IDs, test_captions]).T)
        df.to_csv(output_testset_filename, index=False, header=False)

    print('Output file created at location: {}'.format(output_testset_filename))
        
if __name__ == "__main__":
    start_time = time.time()
    infer()
    print('Total testing time: %.2fs'%(time.time() - start_time))
